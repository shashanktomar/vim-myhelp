*myhelp.txt*	Last change: 2022 Aug 08
*myhelp*

Shashank's cheatsheet for all things terminal 

===============================================================================
CONTENTS

	1. To Practice.......................................|myhelp-practice|
	2. Vim Cheat Sheet.......................................|myhelp-vim-cheat|
	3. Tmux Cheat Sheet.......................................|myhelp-tmux-cheat|
	4. My Setup..........................................|myhelp-setup|
	5. Todo..............................................|myhelp-todo|
	6. About writing help

===============================================================================
 1. To Practice                                                *myhelp-practice*

Vim~

  - delete: X 
  - visual mode: ge, V, C-v, `gn` after search
  - search: ?, *, #
  - recorded macros: https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db
  - line movement
    - `ddp` to swap lines

===============================================================================
 2. Vim Cheat Sheet                                                   *myhelp-vim-cheat*

Language~

  *operators(verbs): |:help operator|*

    - c, d, y
    - toggle case `~`
    - tab: `>`, `<`

  *motions: |:h motion.txt|*

    - modifiers(range)
      - i(inside), a(around), NUM,
      - t(till), T, f(find), F, `;`, `'`
      - 0, ^, $ 

    - text-objects(nouns):
      - words: w, W, e, E, b, B, ge, gE
      - text objects:
        - sentence: s or ), S or (
        - paragraph: p or }, P or {
        - to {: ]], ][, [[, []

Commands~

  check mapped keys: |:map| and |:map!|
    - you can check more fine grained mappings per mode: `xmap` for visual,
    `omap` for operating waiting, `nmap` for normal etc. Check `:h map`

Registers~

- Math expression
  - in insert mode, do `<C-r>=`. Here `<C-r>` paste from a register and `=` is
    a math register

Other Things~

- how to test a simple script
  - open a new file, get the bufnr with: `echo nvim_get_current_buff()`
  - open another to write the script and name is something like test.lua
  - you can write to first file as you type code using `vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, { "hello", "world" })`

===============================================================================
3. Tmux Cheat Sheet                                                   *myhelp-tmux-cheat*

Help~
- see all keys `C-b ?`  
- see what a key is mapped to `C-b /`  
- `:list-commands` list all commands

Command Mode~
- `C-b :` enters the command mode

Sessions~
- `C-b d`: to detach from a session  
- `tmux attach`  
	- attach to most recent by default  
	- `-t` to give a name. Example: `tmux attach -tmysession`: attach to `mysession`  
	- `-d` to detach any other clients attached to this session. Example `tmux attach -dtmysession`  
	- `-A` to attach if exist or create.  Example: `tmux attach -Amysession`  
- changing a window in a session, command is `select-window` aliased to
  `selectw`
  - `C-b n`: where n is the window number
  - `C-b '`: prompts you to enter a number
  - `C-b n` and `C-b p`: next and previous
  - `C-b l`: last window

Windows~
- `new-window` command, alias is `neww`
  - `C-b c`: is shortcut for it 
  - `-d` create it but does not make it the current window
  - `-n` let you provide a name. Example `:neww -dnmynewwindow`
  - `-t` let you give it a target index
  - commands to run in default pane in the window can be passed. Example
    `:nnew top`
- `split-window` command, alias is `splitw`
  - `C-b %` to split horizontally, or `splitw -h`
  - `C-b "` to split vertically, or `splitw -v`
  - `-f` create a full screen pane in the window
  - `-b` put the pane at top or left rather than bottom or right
  - a command to run in new pane can be passed same as to `neww` or `new-session` command
- `kill-window` or `C-b &`

Panes~
- `select-pane` and `display-panes` commands
  - `C-b <Arrow keys>`
  - `C-b q` prints the pane number
  - `C-b q n`: will change to pane number
  - `C-b o`: moves to the next pane
  - `C-b C-o`: swaps the pane with active pane
- `kill-pane` or `C-b x`

Tree Mode~
- command is `choose-tree`
- `C-b s`: show sessions but fold windows
- `C-b w`: expand windows view also
- tree bindings
  - `v` toggle preview
  - arrow keys to navigate, fold and unfold
  - `<CR>` to select
  - `O` changes the order of items and `r` reverse the sort order
  - `t` to tag/untag items, `C-t` to tag all and `T` to untag all
  - `X` to kill all tagged items
  - `:` a command can be applied to all tagged items
  - `C-s` to search items and `n` to repeat last search
- `C-b D`: to see a tree view of list of clients
  - `<CR>` or `d` detach the selected client
  - `D` detach tagged clients 
  - `x`: detach and kill shell which started it
  - `X`: detach all tagged and kill all shells which started them

Others~
- `:kill-server` kill every session and exit

===============================================================================
4. My Setup                                                      *myhelp-setup*

LSP~
- to know the history of LSP support in neovim, check this out https://www.vikasraj.dev/blog/lsp-neovim-retrospective
- in nvim 0.7m nvim-lspconfig is advised. This might not be the case for 0.8
- the list for the servers can be found [here](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md)
- check active lsp servers for current buffer: `:LspInfo`

Mason~
- it only download stuff, does not run any lsp servers
- mason is lsp-server + lint + debug + format plugins installer. 
- the names are mapped to lsp names by mason-lspconfig plugin
- install all the mason plugins: `:MasonInstallAll`. It is a custom command added by nvchad

Null-ls~
- it is just another language server. If you run `:LspInfo` on a code buffer, you can see it appear in the list of servers
- to get better understanding of code-completion through null-ls, have a look at [this](https://www.reddit.com/r/neovim/comments/qphvt7/nulllsnvim_now_supports_completion_sources/) reddit thread
- check active info with `:NullLsInfo` 

Cmp~
- it is a completion plugin with lots of addon plugins
- run `:CmpStatus`

TreeSitter~
- run `:TSConfigInfo` and `:TSModuleInfo`
- check `:TSPlaygroundToggle`

Tips~
- check plugins that are loaded: `:PackerStatus`
- you can send items from Telescope to qflist, ooohhh

===============================================================================
5. Todo                                                           *myhelp-todo*

Plugins~
- [x] understand and setup lspconfig and mason
- [x] setup cmp
- [x] setup treesitter
- [x] setup null-ls
- [x] setup telescope
- [x] play with treesitter extensions
- [x] setup for typescript
- [x] setup nvim-notify
- [x] enable whichkey
- [x] explore cmp plugins
- [x] setup git and gitsigns
- [x] check toggleTerm
- [x] setup format on save
- [x] explore mini.nvim
- [ ] session management
- [ ] explore luasnip
- [ ] go through setup videos again from chris@machine
- [ ] go through allaman's config
  - [x] toggle_autoformat
  - [x] toggle diagnostics
  - [ ] check toggle_qf, toggle_colorcolumn and escape-pair in functions.lua
- [ ] cleanup nvim old config and make sure everything is ported
- [ ] setup trouble-nvim
- [ ] setup nvim-dap
- [ ] go again through Tutor
- [ ] check out AstroNvim
- [ ] setup cue lsp
- [ ] check refactoring.nvim plugin
- [ ] play around more with null-ls
- [ ] learn how to write a treesitter plugin and understand how treesitter queries works
- [ ] understand tmux
- [ ] check other people's setup on youtube and blogs
- [ ] pin plugin versions
- [ ] git plugins to explore
  - [ ] vim fugitive
  - [ ] explore neogit
  - [ ] explore diffview
- [ ] explore bufdelete.nvim
- [ ] move to alacritty
- [ ] understand how operatorfunc and g@ works. Write your own operator. Mini.comment code can help here

UseCases~
- [ ] how to save all buffers safely after rename
- [ ] how to move past the closed brackets in insert mode
- [ ] how to jump to parent node

===============================================================================
6. About writing help

Check https://devhints.io/vim-help. Also check `:help help-writing`

Rebuild help tags~
This file is loaded as a plugin. If you ever need to rebuild the tags file, run
this command:  `:helpt <:/path/to/this/directory>`. You may need to restart VIM to see the updated version.

View this doc as help while writing it~
- `:set ft=help`
- to view it again as txt file run `:set ft=txt`
