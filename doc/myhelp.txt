*myhelp.txt*	Last change: 2022 Aug 08
*myhelp*

Shashank's cheatsheet for Vim

===============================================================================
CONTENTS

	1. To Practice.......................................|myhelp-practice|
	2. Cheat Sheet.......................................|myhelp-cheat|
	3. My Setup..........................................|myhelp-setup|
	4. Todo..............................................|myhelp-todo|
	5. About writing help

===============================================================================

===============================================================================
1. To Practice                                                *myhelp-practice*

- insert: i, a, I, A, o, O, r, R
- delete: x, X, d<motion>, dd, D, J
- visual mode: v, A-v, C-v, `gn` after search
- search: /, ?, n, N, *, #
- search in line: t, f, `;`, `'` 
- recorded macros: https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db
- line movement
  - `ddp` to swap lines

===============================================================================
2. Cheat Sheet                                                   *myhelp-cheat*

Language~
- operators(verbs): `:help operator`
  - c, d, y
  - toggle case `~`
  - tab: `>`, `<`
- motions: `:h motion.txt`
  - modifiers(range)
    - i(inside), a(around), NUM,
    - t(till), T, f(find), F, `;`, `'`
    - 0, ^, $ 
  - text-objects(nouns):
    - words: w, W, e, E, b, B, ge, gE
    - text objects:
      - sentence: s or ), S or (
      - paragraph: p or }, P or {
      - to {: ]], ][, [[, []

Commands~
- check mapped keys: `:map` and `:map!`
  - you can check more fine grained mappings per mode: `xmap` for visual,
    `omap` for operating waiting, `nmap` for normal etc. Check `:h map`

Registers~
- Math expression
  - in insert mode, do `<C-r>=`. Here `<C-r>` paste from a register and `=` is
    a math register

===============================================================================
3. My Setup                                                      *myhelp-setup*

LSP~
- to know the history of LSP support in neovim, check this out https://www.vikasraj.dev/blog/lsp-neovim-retrospective
- in nvim 0.7m nvim-lspconfig is advised. This might not be the case for 0.8
- the list for the servers can be found [here](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md)
- check active lsp servers for current buffer: `:LspInfo`

Mason~
- it only download stuff, does not run any lsp servers
- mason is lsp-server + lint + debug + format plugins installer. 
- the names are mapped to lsp names by mason-lspconfig plugin
- install all the mason plugins: `:MasonInstallAll`. It is a custom command added by nvchad

Null-ls~
- it is just another language server. If you run `:LspInfo` on a code buffer, you can see it appear in the list of servers
- to get better understanding of code-completion through null-ls, have a look at [this](https://www.reddit.com/r/neovim/comments/qphvt7/nulllsnvim_now_supports_completion_sources/) reddit thread
- check active info with `:NullLsInfo` 

Cmp~
- it is a completion plugin with lots of addon plugins
- run `:CmpStatus`

TreeSitter~
- run `:TSConfigInfo` and `:TSModuleInfo`
- check `:TSPlaygroundToggle`

Tips~
- check plugins that are loaded: `:PackerStatus`
- you can send items from Telescope to qflist, ooohhh

===============================================================================
4. Todo                                                           *myhelp-todo*

Plugins~
- [x] understand and setup lspconfig and mason
- [x] setup cmp
- [x] setup treesitter
- [x] setup null-ls
- [x] setup telescope
- [x] play with treesitter extensions
- [x] setup for typescript
- [x] setup nvim-notify
- [x] enable whichkey
- [x] explore cmp plugins
- [x] setup git and gitsigns
- [x] check toggleTerm
- [x] setup format on save
- [x] explore mini.nvim
- [ ] explore luasnip
- [ ] explore nvim-bqf
- [ ] go through setup videos again from chris@machine
- [ ] go through allaman's config
  - [x] toggle_autoformat
  - [x] toggle diagnostics
  - [ ] check toggle_qf, toggle_colorcolumn and escape-pair in functions.lua
- [ ] cleanup nvim old config and make sure everything is ported
- [ ] setup trouble-nvim
- [ ] setup nvim-dap
- [ ] go again through Tutor
- [ ] check out AstroNvim
- [ ] setup cue lsp
- [ ] check refactoring.nvim plugin
- [ ] play around more with null-ls
- [ ] learn how to write a treesitter plugin and understand how treesitter queries works
- [ ] understand tmux
- [ ] check other people's setup on youtube and blogs
- [ ] pin plugin versions
- [ ] git plugins to explore
  - [ ] vim fugitive
  - [ ] explore neogit
  - [ ] explore diffview
- [ ] explore bufdelete.nvim
- [ ] move to alacritty

UseCases~
- [ ] how to save all buffers safely after rename
- [ ] how to move past the closed brackets in insert mode
- [ ] how to jump to parent node

===============================================================================
4. About writing help

Check https://devhints.io/vim-help. Also check `:help help-writing`

Rebuild help tags~
This file is loaded as a plugin. If you ever need to rebuild the tags file, run
this command:  `:helpt <:/path/to/this/directory>`. You may need to restart VIM to see the updated version.

View this doc as help while writing it~
- `:set ft=help`
- to view it again as txt file run `:set ft=txt`
