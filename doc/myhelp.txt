*myhelp.txt*	Last change: 2022 Aug 08
*myhelp*

Shashank's cheatsheet for all things terminal 

===============================================================================
CONTENTS

	1. To Practice.......................................|myhelp-practice|
	2. Vim Cheat Sheet.......................................|myhelp-vim-cheat|
	3. Tmux Cheat Sheet.......................................|myhelp-tmux-cheat|
	4. My Setup..........................................|myhelp-setup|
	5. About writing help

===============================================================================
 1. To Practice                                                *myhelp-practice*

Vim~

  - `C-o` in insert mode let you do one-off action from normal mode
  - delete: X 
  - visual mode: ge, V, C-v, `gn` after search
  - search: ?, *, #
  - recorded macros: https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db
  - line movement
    - `ddp` to swap lines
  - lightspeed bindings
    - operator pending mode with Z and X
  - yank, delete or change till a search term
    - `y/search<Enter>`, `y?search<Enter>`
    - same for `d` or `c`
  - repeating substitution
    - Just type `&` to repeat the last substitution on the current line. You can repeat 
      it on all lines by typing `g&`.
  - folding
    - zf start fold and wait for operator. So zfap fold a paragraph
    - zo and zc to open and close fold, zO and zC
    - zr, zm, zR and zM,
    - zn, zN, zi
    - zd and zD

===============================================================================
 2. Vim Cheat Sheet                                            *myhelp-vim-cheat*

Help~

  read nvim user manual `:h user-manual`

Language~

  operators(verbs) `:help operator`

    - c, d, y
    - toggle case `~`
    - tab: `>`, `<`

  motions `:h motion.txt`

    - modifiers(range)
      - i(inside), a(around), NUM,
      - t(till), T, f(find), F, `;`, `'`
      - 0, ^, $ 

    - text-objects(nouns):
      - words: w, W, e, E, b, B, ge, gE
      - text objects:
        - sentence: s or ), S or (
        - paragraph: p or }, P or {
        - to {: ]], ][, [[, []

Commands~

  check mapped keys: `:map` and `:map!`

    - you can check more fine grained mappings per mode: `xmap` for visual,
    `omap` for operating waiting, `nmap` for normal etc. Check `:h map`

Anti-Patterns~

  - Moving one line at a time
    - move by paragraphs or code blocks using `{` and `}`. Or move by pages using 
      `<Ctrl>b` and `<Ctrl>b`
    - use lightspeed as much as possible
    - `g;` to move to last insert location or `g,` to move to next insert location

Registers~

  Default (Unnamed Register):

    vim has a unnamed (or default) register that can be accessed with "". Any 
    text that you delete (with d, c, s or x) or yank (with y) will be placed 
    there, and that’s what vim uses to paste, when no explicit register is given.
    A simple p is the same thing as doing ""p.

  Numbered Registers (Read Only):

    vim automatically populates what is called the numbered registers for us. 
    As expected, these are registers from "0 to "9. "0 will always have the content 
    of the latest yank, and the others will have last 9 deleted text, being "1 the 
    newest, and "9 the oldest. So if you yanked some text, you can always refer to 
    it using "0p.

  Other Read Only Registers

    - `".` store last insterted text
    - `"%` store the current file path, starting from the directory where vim was first opened
    - `":` is the most recently executed command
    - `"#` is the name of the alternate file, that you can think of it as the last edited file
    - `"-` stores any text that you deleted or changed that was less than one line in length
    - `"/` contains the most recent search pattern. This can be handy for inserting the search 
      pattern on the command line, by pressing Ctrl-R and then /

  Black Hole Register

    - `"_` is a /dev/null of vim world
    - This may not seem immediately useful, but it does come in handy when running an operation 
      that you don’t want to clobber the existing contents of the unnamed register. For example, 
      if you deleted three lines into the unnamed register with 3dd with the intent of pasting 
      them elsewhere with p, but you wanted to delete another line before doing so, you could 
      do that with `"_dd`; line gone, and no harm done.

  Manipulate Macros

    - Append to a macro: if you forgot to add a semicolon in the end of that `w` macro, just do 
      something like `:let @W='i;'`. Noticed the upcased `W?` That’s just how we append a value to 
      a register, using its upcased name, so here we are just appending the command `i`; to the 
      register, to enter insert mode (i) and add a semicolon.
    - Change a macro content: If you need to edit something in the middle of the register, 
      just do `:let @w='<Ctrl-r w>`, change what you want, and close the quotes in the end. 
      Done, no more recording a macro 10 times before you get it right. 

  Math expression

    - in insert mode, do `<C-r>=`. Here `<C-r>` paste from a register and `=` is
    a expression register
    - This can be used to execute all sort of expressions, even calling external
      commands. To give another example, if you type Ctrl-r = and then, in the 
      command line, `system('ls') <enter>`, the output of the ls command will be 
      pasted in your buffer

  Recipies

    - copy the current file path to the clipboard: `let @+=@%` . `let` is used to 
      write to a register, and `"+` is the clipboard register, so we are copying 
      the current file path to the clipboard.
    - cherry pick lines/content into a register to paste in a different
      buffer: Yanking and deleting text into registers normally replaces 
      the previous contents of that register. In some cases it would be 
      preferable to append to a register, for example while cherry-picking 
      different lines from the file to be pasted elsewhere. This can be 
      done by simply capitalizing the name of the register as it’s referenced:
        - "ayy — Replace the contents of register a with the current line.
        - "Ayy — Append the current line to register a.

Other Things~

  How to test a simple lua script

    - open a new file, get the bufnr with: `echo nvim_get_current_buff()`
    - open another to write the script and name is something like test.lua
    - you can write to first file as you type code using `vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, { "hello", "world" })`

  Enter complex keystrokes as string literals

    You can enter any keystroke in Vim literally in insert or command mode by 
    prefixing it with `Ctrl+V`, that isn’t really a problem. So to enter a literal 
    `Ctrl+R` in insert mode, you type `Ctrl+V`, then Ctrl+R.

===============================================================================
3. Tmux Cheat Sheet                                           *myhelp-tmux-cheat*

Help~

  - `:list-keys` or `:lsk` or `tmux lsk`
    - to check keys for a table, use `-T`. Example `:lsk -T prefix` or `:lsk
      -T prefix -N` for pretty print
    - also try `tmux lsk -N | more`

  - `:list-commands` or `tmux list-commands`
  - see all keys from prefix table: `C-b ?`  
  - see what a key is mapped to `C-b /` 

Command Mode~

  - `C-b :` enters the command mode
  - multiple commands can be passed by separating them with `;`

Sessions~

  - `new-session` or `new`
    - `-s` to give name. Example `tmux new -smysession`
    - to run a command, `tmux new 'nvim ~/.zshrc'`
    - to run it in a named window, `tmux new -nwindowname htop`

  - `tmux attach`  
    - attach to most recent by default  
    - `-t` to give a name. Example: `tmux attach -tmysession`: attach to `mysession`  
    - `-d` to detach any other clients attached to this session. Example `tmux attach -dtmysession`  
    - `-A` to attach if exist or create.  Example: `tmux attach -Amysession`  

  - `C-b d`: to detach from a session  

  - changing a window in a session, command is `select-window` aliased to
    `selectw`
    - `C-b n`: where n is the window number
    - `C-b '`: prompts you to enter a number
    - `C-b n` and `C-b p`: next and previous
    - `C-b l`: last window

  - session groups
    - To understand the usecase, check this https://unix.stackexchange.com/questions/24274/attach-to-different-windows-in-session/24288#24288
    - `new-session` take a `-t` flat. Provide the name of another existing
      session here 

Windows~

  - `new-window` command, alias is `neww`
    - `C-b c`: is shortcut for it 
    - `-d` create it but does not make it the current window
    - `-n` let you provide a name. Example `:neww -dnmynewwindow`
    - `-t` let you give it a target index
    - commands to run in default pane in the window can be passed. Example
      `:nnew top`

  - `split-window` command, alias is `splitw`
    - `C-b %` to split horizontally, or `splitw -h`
    - `C-b "` to split vertically, or `splitw -v`
    - `-f` create a full screen pane in the window
    - `-b` put the pane at top or left rather than bottom or right
    - a command to run in new pane can be passed same as to `neww` or `new-session` command

  - `rename-window` or `C-b ,`
  - `kill-window` or `C-b &`

Panes~

  - `select-pane` and `display-panes` commands
    - `C-b <Arrow keys>`
    - `C-b q` prints the pane number
    - `C-b q n`: will change to pane number
    - `C-b o`: moves to the next pane
    - `C-b C-o`: swaps the pane with active pane

  - `kill-pane` or `C-b x`

  - resize and zoom
    - `C-b z` will zoom into and zoom out of pane
    - `C-b C-<arrow-keys>` resize with small jumps, `C-b M-<arrow-keys>`
      resize with big jumps
  
  - predefined layouts
    - `C-b space` to cycle through them. Or `C-b M-<n>` where n is a number

Tree Mode~

  - command is `choose-tree`
  - `C-b s`: show sessions but fold windows
  - `C-b w`: expand windows view also

  - tree bindings
    - `v` toggle preview
    - arrow keys to navigate, fold and unfold
    - `<CR>` to select
    - `O` changes the order of items and `r` reverse the sort order
    - `t` to tag/untag items, `C-t` to tag all and `T` to untag all
    - `X` to kill all tagged items
    - `:` a command can be applied to all tagged items
    - `C-s` to search items and `n` to repeat last search

  - `C-b D`: to see a tree view of list of clients
    - `<CR>` or `d` detach the selected client
    - `D` detach tagged clients 
    - `x`: detach and kill shell which started it
    - `X`: detach all tagged and kill all shells which started them

  - `C-b f` enter the tree view with searched text

Others~

- `:kill-server` kill every session and exit

===============================================================================
4. My Setup                                                        *myhelp-setup*

LSP~
- to know the history of LSP support in neovim, check this out https://www.vikasraj.dev/blog/lsp-neovim-retrospective
- in nvim 0.7m nvim-lspconfig is advised. This might not be the case for 0.8
- the list for the servers can be found [here](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md)
- check active lsp servers for current buffer: `:LspInfo`

Mason~
- it only download stuff, does not run any lsp servers
- mason is lsp-server + lint + debug + format plugins installer. 
- the names are mapped to lsp names by mason-lspconfig plugin
- install all the mason plugins: `:MasonInstallAll`. It is a custom command added by nvchad

Null-ls~
- it is just another language server. If you run `:LspInfo` on a code buffer, you can see it appear in the list of servers
- to get better understanding of code-completion through null-ls, have a look at [this](https://www.reddit.com/r/neovim/comments/qphvt7/nulllsnvim_now_supports_completion_sources/) reddit thread
- check active info with `:NullLsInfo` 

Cmp~
- it is a completion plugin with lots of addon plugins
- run `:CmpStatus`

TreeSitter~
- run `:TSConfigInfo` and `:TSModuleInfo`
- check `:TSPlaygroundToggle`

Tips~
- check plugins that are loaded: `:PackerStatus`
- you can send items from Telescope to qflist, ooohhh

===============================================================================
5. About writing help

Check https://devhints.io/vim-help. Also check `:help help-writing`

Rebuild help tags~
This file is loaded as a plugin. If you ever need to rebuild the tags file, run
this command:  `:helpt <:/path/to/this/directory>`. You may need to restart VIM to see the updated version.

View this doc as help while writing it~
- `:set ft=help`
- to view it again as txt file run `:set ft=txt`

 vim:tw=78:ts=8:ft=help:norl:
